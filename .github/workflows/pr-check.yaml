name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Quick Lint Check
  quick-lint:
    name: Quick Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Black (code formatting check)
        run: |
          black --check --diff stage1_cifar10/

      - name: Run isort (import sorting check)
        run: |
          isort --check-only --diff stage1_cifar10/

      - name: Run flake8 (linting)
        run: |
          flake8 stage1_cifar10/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 stage1_cifar10/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  # Unit Tests
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r stage1_cifar10/requirements.txt

      - name: Run tests with pytest
        run: |
          cd stage1_cifar10
          pytest tests/ -v --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: stage1_cifar10/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: python-security/bandit-action@v1.0.0
        with:
          path: stage1_cifar10/
          level: medium
          confidence: medium

      - name: Run Safety check
        uses: python-security/safety-action@v1.0.0
        with:
          path: stage1_cifar10/requirements.txt

  # Docker Build Test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [quick-lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd stage1_cifar10
          docker build -t cifar10-ml:pr-test .

      - name: Test Docker image
        run: |
          cd stage1_cifar10
          docker run --rm cifar10-ml:pr-test python -c "import torch; print('PyTorch version:', torch.__version__)"

  # PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-lint, test, security, docker-test]
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "## Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.quick-lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quick-lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "🎉 All checks passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some checks failed. Please review the issues above." >> $GITHUB_STEP_SUMMARY
          fi
